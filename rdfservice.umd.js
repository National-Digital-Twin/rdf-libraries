var R=Object.defineProperty;var $=(n,o,h)=>o in n?R(n,o,{enumerable:!0,configurable:!0,writable:!0,value:h}):n[o]=h;var i=(n,o,h)=>($(n,typeof o!="symbol"?o+"":o,h),h),L=(n,o,h)=>{if(!o.has(n))throw TypeError("Cannot "+h)};var g=(n,o,h)=>{if(o.has(n))throw TypeError("Cannot add the same private member more than once");o instanceof WeakSet?o.add(n):o.set(n,h)};var E=(n,o,h)=>(L(n,o,"access private method"),h);(function(n,o){typeof exports=="object"&&typeof module<"u"?o(exports):typeof define=="function"&&define.amd?define(["exports"],o):(n=typeof globalThis<"u"?globalThis:n||self,o(n["@telicent-oss/rdfservice"]={}))})(this,function(n){var p,v;"use strict";const o="Cannot have an empty URI",h="predicate must be provided",m="W3C/XML prefixes must end with a : (colon) character",P="Unknown Prefix ",b="ID field is not in the results",d=y=>!y;class u{constructor(t,e,r,s){i(this,"uri");i(this,"_type");i(this,"service");if(this.service=t,s)this.uri=s.uri.value,this._type=s._type.value;else if(e?this.uri=e:this.uri=this.service.mintUri(),r)this._type=r,this.service.instantiate(this._type,this.uri);else throw new Error("An RDFResource requires a type, or a statement PropertyQuery object")}async addLiteral(t,e,r=!1){if(d(t))throw new Error("Cannot have an empty predicate");if(d(e))throw new Error("Cannot have empty text in a triple");r&&await this.service.deleteRelationships(this.uri,t),await this.service.insertTriple(this.uri,t,e,"LITERAL")}async addLabel(t,e=!1){if(d(t))throw new Error("invalid label string");await this.addLiteral(this.service.rdfsLabel,t,e)}async addComment(t,e=!1){if(d(t))throw new Error("invalid comment string");await this.addLiteral(this.service.rdfsComment,t,e)}}class c extends u{constructor(t,e,r,s){r||(r="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"),super(t,e,r,s)}async getSubProperties(t=!1){var e="";t&&(e="*");const r=`SELECT ?uri ?_type WHERE {?uri rdfs:subPropertyOf${e} <${this.uri}> . ?uri a ?_type}`,s=await this.service.runQuery(r);var a=[];for(var l of s.results.bindings){var f=this.service.lookupClass(l._type.value,c),w=new f(this.service,void 0,void 0,l);a.push(w)}return a}}class x{constructor(t="http://localhost:3030/",e="ds",r="http://telicent.io/data/",s=""){g(this,p);i(this,"defaultSecurityLabel");i(this,"dataset");i(this,"triplestoreUri");i(this,"queryEndpoint");i(this,"updateEndpoint");i(this,"dc");i(this,"xsd");i(this,"rdf");i(this,"rdfs");i(this,"owl");i(this,"telicent");i(this,"prefixDict");i(this,"rdfType");i(this,"rdfProperty");i(this,"rdfsClass");i(this,"rdfsResource");i(this,"rdfsSubClassOf");i(this,"rdfsSubPropertyOf");i(this,"rdfsLabel");i(this,"rdfsComment");i(this,"rdfsDomain");i(this,"rdfsRange");i(this,"owlClass");i(this,"owlDatatypeProperty");i(this,"owlObjectProperty");i(this,"telicentStyle");i(this,"classLookup");this.defaultSecurityLabel=s,this.dataset=e,this.triplestoreUri=t,this.queryEndpoint=this.triplestoreUri+e+"/query?query=",this.updateEndpoint=this.triplestoreUri+e+"/update",this.dc="http://purl.org/dc/elements/1.1/",this.xsd="http://www.w3.org/2001/XMLSchema#",this.rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#",this.rdfs="http://www.w3.org/2000/01/rdf-schema#",this.owl="http://www.w3.org/2002/07/owl#",this.telicent="http://telicent.io/ontology/",this.rdfType=`${this.rdf}type`,this.rdfProperty=`${this.rdf}Property`,this.rdfsResource=`${this.rdfs}Resource`,this.rdfsClass=`${this.rdfs}Class`,this.rdfsSubClassOf=`${this.rdfs}subClassOf`,this.rdfsSubPropertyOf=`${this.rdfs}subPropertyOf`,this.rdfsLabel=`${this.rdfs}label`,this.rdfsComment=`${this.rdfs}comment`,this.rdfsDomain=`${this.rdfs}domain`,this.rdfsRange=`${this.rdfs}range`,this.owlClass=`${this.owl}#Class`,this.owlDatatypeProperty=`${this.owl}DatatypeProperty`,this.owlObjectProperty=`${this.owl}ObjectProperty`,this.telicentStyle=`${this.telicent}style`,this.prefixDict={},this.addPrefix(":",r),this.addPrefix("xsd:",this.xsd),this.addPrefix("dc:",this.dc),this.addPrefix("rdf:",this.rdf),this.addPrefix("rdfs:",this.rdfs),this.addPrefix("owl:",this.owl),this.addPrefix("telicent:",this.telicent),this.classLookup={},this.classLookup[this.rdfsResource]=u,this.classLookup[this.rdfProperty]=c}wrapPropertyList(t){var e=[];return t.results.bindings.forEach(r=>{var s=this.lookupClass(r._type.value,c),a=new s(this,void 0,void 0,r);e.push(a)}),e}lookupClass(t,e){return this.classLookup[t]?this.classLookup[t]:e}getAllElements(t){console.warn("This has been deprecated - who wants to get everything at once ?")}addPrefix(t,e){if(t.slice(-1)!=":")throw m;this.prefixDict[t]=e}set defaultNamespace(t){this.addPrefix(":",t)}get defaultNamespace(){return this.prefixDict[":"]}getPrefix(t){const e=Object.keys(this.prefixDict),r=Object.values(this.prefixDict);return e.find((s,a)=>r[a]===t)||t}shorten(t){const r=Object.keys(this.prefixDict).find(s=>t.includes(this.prefixDict[s]));return r?t.replace(this.prefixDict[r],r):t}getSparqlPrefix(t){if(t in this.prefixDict)return`PREFIX ${t} <${this.prefixDict[t]}> `;throw P+t}get sparqlPrefixes(){let t="";for(let e in this.prefixDict)t=t+`PREFIX ${e} <${this.prefixDict[e]}> `;return t}mintUri(t=this.defaultNamespace){return t+crypto.randomUUID()}async runQuery(t){if(d(t))throw Error("runQuery: A valid query is required");const e=await fetch(this.queryEndpoint+encodeURIComponent(this.sparqlPrefixes+t));if(!e.ok)throw e.statusText;return await e.json()}async runUpdate(t,e){let r=e??this.defaultSecurityLabel;d(r)&&console.warn("Security label is being set to an empty string. Please check your security policy as this may make the data inaccessible");var s={method:"POST",headers:{Accept:"*/*","Content-Type":"application/sparql-update"},body:this.sparqlPrefixes+t};const a=await fetch(this.updateEndpoint,s);if(!a.ok)throw a.statusText;return a.text()}async insertTriple(t,e,r,s,a,l){var f=E(this,p,v).call(this,r,s,l);return await this.runUpdate("INSERT DATA {<"+t+"> <"+e+"> "+f+" . }",a)}async deleteTriple(t,e,r,s,a){var l=E(this,p,v).call(this,r,s,a);return await this.runUpdate("DELETE DATA {<"+t+"> <"+e+"> "+l+" . }")}async deleteNode(t,e=!1){if(d(t))throw Error(o);await this.runUpdate("DELETE WHERE {<"+t+"> ?p ?o . }"),e||await this.runUpdate("DELETE WHERE {?s ?p <"+t+">}")}async deleteRelationships(t,e){if(d(t))throw Error(o);if(d(e))throw Error("Cannot have an empty predicate");await this.runUpdate(`DELETE WHERE {<${t}> <${e}> ?o . }`)}async instantiate(t,e,r){if(d(t))throw Error("Cannot have an empty cls");return e||(e=this.mintUri()),await this.insertTriple(e,this.rdfType,t,void 0,r),e}async getRelated(t,e){var f;if(d(t))throw new Error(o);if(d(e))throw new Error(h);const r=`SELECT ?related WHERE {<${t}> ?pred ?related . ?pred <${this.rdfsSubPropertyOf}>* <${e}> .}`,s=await this.runQuery(r);return(f=s==null?void 0:s.results)!=null&&f.bindings?s.results.bindings.map(w=>w.related.value):[]}async getRelating(t,e){var l;if(d(t))throw new Error(o);if(d(e))throw new Error(h);const r=`SELECT ?relating WHERE {?relating ?pred <${t}> . ?pred <${this.rdfsSubPropertyOf}>* <${e}> . }`,s=await this.runQuery(r);return(l=s==null?void 0:s.results)!=null&&l.bindings?s.results.bindings.map(f=>f.relating.value):[]}}p=new WeakSet,v=function(t,e="URI",r){if(e==="URI")var s=`<${t}>`;else if(e=="LITERAL"){var s=`"${t}"`;r&&(s=`${s}^^${r}`)}else throw new Error("unknown objectType");return s},n.RDFProperty=c,n.RDFSResource=u,n.default=x,n.emptyPredicateErrorMessage=h,n.emptyUriErrorMessage=o,n.noColonInPrefixException=m,n.unknownPrefixException=P,n.unrecognisedIdField=b,Object.defineProperties(n,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
